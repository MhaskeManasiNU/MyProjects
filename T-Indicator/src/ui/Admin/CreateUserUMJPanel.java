/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Admin;

import java.awt.CardLayout;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import model.CommuterSystem.CommuterSystem;
import model.Personas.AdminDirectory;
import model.Personas.AdminProfile;
import model.Personas.Person;
import model.Personas.PersonDirectory;
import model.Personas.StaffDirectory;
import model.Personas.StaffProfile;
import model.Personas.TechnicianDirectory;
import model.Personas.TechnicianProfile;
import model.UserManagement.User;
import model.UserManagement.UserDirectory;

/**
 *
 * @author rudra
 */
public class CreateUserUMJPanel extends javax.swing.JPanel {
private JPanel userProcessContainer;
    private CommuterSystem commuterSystem;
    /**
     * Creates new form CreateUserUMJPanel
     */
    public CreateUserUMJPanel(JPanel userProcessContainer, CommuterSystem commuterSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.commuterSystem = commuterSystem;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblFName = new javax.swing.JLabel();
        txtFName = new javax.swing.JTextField();
        lblLname = new javax.swing.JLabel();
        txtLName = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblUsername = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        dropDownRole = new javax.swing.JComboBox<>();
        btnCreate = new javax.swing.JButton();

        setBackground(new java.awt.Color(102, 153, 255));

        btnBack.setBackground(new java.awt.Color(102, 102, 102));
        btnBack.setText("<<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Perpetua Titling MT", 1, 24)); // NOI18N
        lblTitle.setText("Create USER");

        lblFName.setText("First Name : ");

        lblLname.setText("Last Name :");

        lblEmail.setText("E-mail :");

        lblUsername.setText("Username :");

        lblPassword.setText("Password :");

        jLabel1.setText("Role :");

        dropDownRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Technician", "Staff", "Admin", " " }));

        btnCreate.setText("CREATE >>");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(btnBack)
                        .addGap(161, 161, 161)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(261, 261, 261)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblFName)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblLname)
                                        .addComponent(lblUsername)
                                        .addComponent(lblEmail)
                                        .addComponent(lblPassword)
                                        .addComponent(jLabel1)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dropDownRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtFName)
                                        .addComponent(txtLName)
                                        .addComponent(txtEmail)
                                        .addComponent(txtUsername)
                                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(260, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(lblTitle))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFName)
                    .addComponent(txtFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLname)
                    .addComponent(txtLName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dropDownRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(btnCreate)
                .addContainerGap(66, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        // Remove the current panel from the container
    userProcessContainer.remove(this);

    // Refresh and navigate to the previous panel
    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
    layout.previous(userProcessContainer);

    // Refresh the container to ensure proper layout update
    userProcessContainer.revalidate();
    userProcessContainer.repaint();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        // Validate the password before proceeding
    String password = txtPassword.getText();
    String email = txtEmail.getText();
    String firstName = txtFName.getText().trim();
    String lastName = txtLName.getText().trim();
    String username = txtUsername.getText().trim();
    String role = (String) dropDownRole.getSelectedItem();
    // Check for empty fields
    if (firstName.isEmpty() || lastName.isEmpty() || email.isEmpty() || username.isEmpty() || password.isEmpty()) {
        JOptionPane.showMessageDialog(this, "All fields are mandatory!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    // Validate email
    if (!isValidEmail(email)) {
        JOptionPane.showMessageDialog(this, "Invalid email format! Please enter a valid email address.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    if (!isValidPassword(password)) {
        JOptionPane.showMessageDialog(this, 
            "Password must contain:\n- At least one uppercase letter\n- At least one lowercase letter\n- At least one special character\n- Minimum length of 8 characters.", 
            "Invalid Password", 
            JOptionPane.ERROR_MESSAGE);
        return;
    }
         String id = generateRandomID();
         PersonDirectory personDirectory = commuterSystem.getPersonDirectory();
         Person person = new Person(id, txtFName.getText(),txtLName.getText(), txtEmail.getText());
         personDirectory.addPerson(person);
         UserDirectory userDirectory = commuterSystem.getUserDirectory();
         User user = new User(txtUsername.getText(), txtPassword.getText(), dropDownRole.getSelectedItem().toString());
         person.setUser(user);
         userDirectory.addUser(user);
         AdminDirectory adminDirectory = commuterSystem.getAdminDirectory();
         StaffDirectory staffDirectory = commuterSystem.getStaffDirectory();
         TechnicianDirectory technicianDirectory = commuterSystem.getTechnicianDirectory();
         switch (dropDownRole.getSelectedItem().toString()) {
    case "Technician":
         TechnicianProfile technicianProfile = new TechnicianProfile(person);
        technicianDirectory.addTechnicianProfile(technicianProfile);
        break;
    case "Admin":
        AdminProfile adminProfile = new AdminProfile(person);
        adminDirectory.addAdminProfile(adminProfile);
        
        break;
    case "Staff":
        StaffProfile staffProfile = new StaffProfile(person);
        staffDirectory.addStaffProfile(staffProfile);
        break;
    default:
        // Code block if none of the cases match
        break;
}
         JOptionPane.showMessageDialog(this, "User Created.", "Success", JOptionPane.INFORMATION_MESSAGE);
         
    }//GEN-LAST:event_btnCreateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreate;
    private javax.swing.JComboBox<String> dropDownRole;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFName;
    private javax.swing.JLabel lblLname;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFName;
    private javax.swing.JTextField txtLName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    private String generateRandomID() {
        Random random = new Random();
        int id = 10000000 + random.nextInt(90000000); // Range: 10000000 to 99999999
        return String.valueOf(id);
 
    }
    private boolean isValidPassword(String password) {
    if (password.length() < 8) {
        return false;
    }
    boolean hasUppercase = false;
    boolean hasLowercase = false;
    boolean hasSpecialChar = false;

    for (char c : password.toCharArray()) {
        if (Character.isUpperCase(c)) {
            hasUppercase = true;
        } else if (Character.isLowerCase(c)) {
            hasLowercase = true;
        } else if (!Character.isLetterOrDigit(c)) {
            hasSpecialChar = true;
        }
    }

    return hasUppercase && hasLowercase && hasSpecialChar;
    }
    private boolean isValidEmail(String email) {
    // Regex for validating email
    String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*\\.[a-zA-Z]{2,7}$";
    return email.matches(emailRegex);
}
}
