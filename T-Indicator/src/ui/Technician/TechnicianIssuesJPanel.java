/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Technician;

import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.CommuterSystem.CommuterSystem;
import model.IssueManagement.Issue;
import model.Personas.TechnicianProfile;

/**
 *
 * @author priyankbagad
 */
public class TechnicianIssuesJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private CommuterSystem commuterSystem;
    private TechnicianProfile technicianProfile;
    private String technicianID;

    /**
     * Creates new form TechnicianIssuesJPanel
     */
     public TechnicianIssuesJPanel(JPanel userProcessContainer,CommuterSystem commuterSystem, TechnicianProfile technicianProfile) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.commuterSystem = commuterSystem;
        this.technicianProfile = technicianProfile;
        technicianID = technicianProfile.getPerson().getId();
        populateIssuesTable();
//         addTableListener(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        techIssueTable = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 204, 102));

        techIssueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Issue_ID", "Line Name", "Description", "Status", "Raised_by"
            }
        ));
        jScrollPane1.setViewportView(techIssueTable);

        btnView.setText("VIEW ISSUE");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(102, 102, 102));
        btnBack.setText("<<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Perpetua Titling MT", 1, 24)); // NOI18N
        lblTitle.setText("ASSIGNED TASKS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(btnView))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addGap(75, 75, 75)
                                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btnView)
                .addContainerGap(97, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
    int selectedRow =  techIssueTable.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select an issue to view details.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Get data from the selected row
    String issueID = (String)  techIssueTable.getValueAt(selectedRow, 0);
    String stationName = (String)  techIssueTable.getValueAt(selectedRow, 1);
    String description = (String)  techIssueTable.getValueAt(selectedRow, 2);
    String status = (String)  techIssueTable.getValueAt(selectedRow, 3);
    String raisedBy = (String)  techIssueTable.getValueAt(selectedRow, 4);
   
     // Retrieve the selected issue using the CommuterSystem's getIssueDirectory()
    Issue selectedIssue = commuterSystem.getIssueDirectory().findIssueByID(issueID);
    if (selectedIssue == null) {
        JOptionPane.showMessageDialog(this, "Issue not found.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    // Use findTechnicianByPersonID to retrieve the TechnicianProfile
    TechnicianProfile technician = commuterSystem.findTechnicianByPersonID(technicianID);
    if (technician != null) {
        selectedIssue.setAssignedTo(technician);  // Assign the entire TechnicianProfile to the issue
    } else {
        JOptionPane.showMessageDialog(this, "Technician not found.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    TechnicianViewIssues technicianViewIssuesPanel = new TechnicianViewIssues(userProcessContainer, commuterSystem,  technicianProfile, selectedIssue);
    userProcessContainer.add("TechnicianViewIssues", technicianViewIssuesPanel);
    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
    layout.show(userProcessContainer, "TechnicianViewIssues");
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        // Remove the current panel from the container
        userProcessContainer.remove(this);

        // Refresh and navigate to the previous panel
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

        // Refresh the container to ensure proper layout update
        userProcessContainer.revalidate();
        userProcessContainer.repaint();
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnView;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable techIssueTable;
    // End of variables declaration//GEN-END:variables

    
        private void populateIssuesTable() {
        DefaultTableModel tableModel = (DefaultTableModel) techIssueTable.getModel();
        tableModel.setRowCount(0); // Clear existing rows

        ArrayList<Issue> issues = commuterSystem.getIssueDirectory().getIssues();
        if (issues == null || issues.isEmpty()) {
            System.out.println("No issues found in IssueDirectory!");
            return;
        }

        for (Issue issue : issues) {
            if (issue.getAssignedTo() != null && technicianID.equals(issue.getAssignedTo().getPerson().getId())) {
                tableModel.addRow(new Object[]{
                    issue.getIssueID(),
                    issue.getLineName(),
                    issue.getDescription(),
                    issue.getStatus(),
                    issue.getRaisedBy()
                });
            }
        }
        tableModel.fireTableDataChanged();
    }
//        private void addTableListener() {
//        techIssueTable.getSelectionModel().addListSelectionListener(event -> {
//            if (!event.getValueIsAdjusting() && techIssueTable.getSelectedRow() != -1) {
//                populateIssueDetails(techIssueTable.getSelectedRow());
//            }
//        });
//    }
//         private void populateIssueDetails(int selectedRow) {
//        // Get data from the selected row
//        String issueID = (String) techIssueTable.getValueAt(selectedRow, 0);
//        String stationName = (String) techIssueTable.getValueAt(selectedRow, 1);
//        String description = (String) techIssueTable.getValueAt(selectedRow, 2);
//        String status = (String) techIssueTable.getValueAt(selectedRow, 3);
//        String raisedBy = (String) techIssueTable.getValueAt(selectedRow, 4);
//        Issue issue2 = new Issue(issueID, stationName, description, status, raisedBy);
//        issue2.setAssignedTo(technicianProfile.getPerson().getId()); 
//
//        
//}

    }

