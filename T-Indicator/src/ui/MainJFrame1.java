/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;
import java.awt.CardLayout;
import ui.Admin.AdminJPanel;
import javax.swing.JOptionPane;
import model.CommuterSystem.CommuterSystem;
import model.CommuterSystem.ConfigureCommuterSystem;
import model.LineManagement.LineDirectory;
import model.Personas.AnalystProfile;
import model.Personas.CustomerServiceRepresentativeProfile;
import model.Personas.IssueManagerProfile;
import model.Personas.LineManagerProfile;
import model.Personas.Person;
import model.Personas.StaffProfile;
import model.Personas.TechnicianProfile;
import model.UserManagement.User;
import ui.Admin.AdminJPanel;
import ui.Analyst.AnalystJPanel;
import ui.CSRJ.CSRJPanel;
import ui.Customer.CustomerLoginJPanel;
import ui.IssueManager.IssueManagerJPanel;
import ui.LineManagement.LineManagerJPanel;
import ui.Staff.StaffJPanel;
import ui.Technician.TechnicianJPanel;

/**
 *
 * @author rudra
 */
public class MainJFrame1 extends javax.swing.JFrame {

    private CommuterSystem commuterSystem;
    private LineDirectory lineDirectory;
     /**
     * Creates new form MainJFrame with a CommuterSystem.
     */
    public MainJFrame1(CommuterSystem commuterSystem) {
        this.commuterSystem = commuterSystem; // Initialize commuter system
        this.lineDirectory = commuterSystem.getLineDirectory();
        initComponents();
        setSize(1000, 600);
        
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SplitPane = new javax.swing.JSplitPane();
        ControlPanel = new javax.swing.JPanel();
        lblUserID = new javax.swing.JLabel();
        txtUserID = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        btnViewPassword = new javax.swing.JButton();
        txtPassword = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        UserProcessContainer = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        SplitPane.setDividerLocation(350);

        ControlPanel.setBackground(new java.awt.Color(204, 255, 204));
        ControlPanel.setForeground(new java.awt.Color(204, 204, 204));

        lblUserID.setText("UserID");

        txtUserID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserIDActionPerformed(evt);
            }
        });

        lblPassword.setText("Password");

        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Stencil", 0, 24)); // NOI18N
        lblTitle.setText("Welcome to MBTA");

        btnViewPassword.setText("View");
        btnViewPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPasswordActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/T Logoo.png"))); // NOI18N
        jLabel3.setPreferredSize(new java.awt.Dimension(32, 16));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/MBTA.png"))); // NOI18N

        javax.swing.GroupLayout ControlPanelLayout = new javax.swing.GroupLayout(ControlPanel);
        ControlPanel.setLayout(ControlPanelLayout);
        ControlPanelLayout.setHorizontalGroup(
            ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ControlPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblUserID, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblPassword))
                .addGap(39, 39, 39)
                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ControlPanelLayout.createSequentialGroup()
                        .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(ControlPanelLayout.createSequentialGroup()
                        .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLogin)
                            .addGroup(ControlPanelLayout.createSequentialGroup()
                                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnViewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 39, Short.MAX_VALUE))))
            .addGroup(ControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ControlPanelLayout.createSequentialGroup()
                        .addComponent(lblTitle)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        ControlPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblPassword, lblUserID});

        ControlPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtPassword, txtUserID});

        ControlPanelLayout.setVerticalGroup(
            ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ControlPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel2)
                .addGap(65, 65, 65)
                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTitle)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(ControlPanelLayout.createSequentialGroup()
                        .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnViewPassword)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ControlPanelLayout.createSequentialGroup()
                        .addComponent(lblUserID)
                        .addGap(47, 47, 47)
                        .addComponent(lblPassword)))
                .addGap(38, 38, 38)
                .addComponent(btnLogin)
                .addContainerGap(146, Short.MAX_VALUE))
        );

        SplitPane.setLeftComponent(ControlPanel);

        UserProcessContainer.setBackground(new java.awt.Color(102, 153, 255));
        UserProcessContainer.setForeground(new java.awt.Color(204, 204, 255));
        UserProcessContainer.setLayout(new java.awt.CardLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/STATION.jpg"))); // NOI18N
        UserProcessContainer.add(jLabel1, "card2");

        SplitPane.setRightComponent(UserProcessContainer);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SplitPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SplitPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:
        handleLogin();
        txtUserID.setText("");
        txtPassword.setText("");
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnViewPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPasswordActionPerformed
     // Check if password is currently hidden (using bullet) or visible
    if (txtPassword.getEchoChar() == '\u2022') { // If hidden
        txtPassword.setEchoChar((char) 0); // Set echo character to none (visible password)
        btnViewPassword.setText("Hide");  // Change button text to "Hide"
    } else {
        txtPassword.setEchoChar('\u2022');  // Set echo character back to bullet (hidden password)
        btnViewPassword.setText("View");   // Change button text to "View"
    }
    }//GEN-LAST:event_btnViewPasswordActionPerformed

    private void txtUserIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserIDActionPerformed

    
   private void handleLogin() {
    String username = txtUserID.getText();
    String password = txtPassword.getText();
    if (!isValidPassword(password)) {
            JOptionPane.showMessageDialog(this, 
                "Password must be at least 8 characters long and include:\n"
                + "- At least one uppercase letter\n"
                + "- At least one lowercase letter\n"
                + "- At least one special character",
                "Invalid Password", 
                JOptionPane.ERROR_MESSAGE
            );
            return; // Stop the login process if password is invalid
        }
    String loggedInPersonID = null;

    // Authenticate User
    User authenticatedUser = commuterSystem.getUserDirectory().authenticateUser(username, password);
    if (authenticatedUser != null) {
        String role = authenticatedUser.getRole();
        JOptionPane.showMessageDialog(this, "Login Successful! Role: " + role);

        // Retrieve the associated person
        Person loggedInPerson = commuterSystem.getPersonDirectory().findPersonByUser(authenticatedUser);
        if (loggedInPerson != null) {
            loggedInPersonID = loggedInPerson.getId(); // Store logged-in Person ID
        }

        // Get CardLayout of the UserProcessContainer
        CardLayout layout = (CardLayout) UserProcessContainer.getLayout();

        // Clear the existing panel (if any) before adding the new one
        UserProcessContainer.removeAll();

        // Switch the view to the appropriate panel based on role
        switch (role) {
    case "Admin":
        AdminJPanel adminPanel = new AdminJPanel(UserProcessContainer, commuterSystem);
        UserProcessContainer.add("AdminJPanel", adminPanel);
        layout.show(UserProcessContainer, "Admin");
        break;
    case "Staff":
        StaffProfile staffProfile = commuterSystem.getStaffDirectory().findStaffByPersonID(loggedInPersonID);
        if (staffProfile == null) {
            JOptionPane.showMessageDialog(this, "Staff profile not found.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        StaffJPanel staffPanel = new StaffJPanel(UserProcessContainer, commuterSystem.getLineDirectory(), staffProfile, commuterSystem);
        UserProcessContainer.add("StaffJPanel", staffPanel);
        layout.show(UserProcessContainer, "StaffJPanel");
        break;
    case "Technician":
        TechnicianProfile technicianProfile = commuterSystem.getTechnicianDirectory().findTechnicianByPersonID(loggedInPersonID);
        if (technicianProfile == null) {
            JOptionPane.showMessageDialog(this, "Technician profile not found.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        TechnicianJPanel technicianPanel = new TechnicianJPanel(UserProcessContainer, commuterSystem, technicianProfile);
        UserProcessContainer.add("TechnicianJPanel", technicianPanel);
        layout.show(UserProcessContainer, "TechnicianJPanel");
        break;
        case "GeneralUser":
    // Navigate to CustomerLoginJPanel for GeneralUser
    CustomerLoginJPanel customerPanel = new CustomerLoginJPanel(UserProcessContainer, commuterSystem);
    UserProcessContainer.add("CustomerLoginJPanel", customerPanel);
    layout.show(UserProcessContainer, "CustomerLoginJPanel");
    break;
    case "Analyst":
        AnalystProfile analystProfile = commuterSystem.getAnalystDirectory().findAnalystByPersonID(loggedInPersonID);
        if (analystProfile == null) {
            JOptionPane.showMessageDialog(this, "Analyst profile not found.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        AnalystJPanel analystPanel = new AnalystJPanel(UserProcessContainer, commuterSystem, analystProfile);
        UserProcessContainer.add("AnalystJPanel", analystPanel);
        layout.show(UserProcessContainer, "AnalystJPanel");
        break;
    case "LineManager":
        LineManagerProfile lineManagerProfile = commuterSystem.getLineManagerDirectory().findLineManagerByPersonID(loggedInPersonID);
        if (lineManagerProfile == null) {
            JOptionPane.showMessageDialog(this, "Line Manager profile not found.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        LineManagerJPanel lineManagerPanel = new LineManagerJPanel(UserProcessContainer, commuterSystem, lineManagerProfile);
        UserProcessContainer.add("LineManagerJPanel", lineManagerPanel);
        layout.show(UserProcessContainer, "LineManagerJPanel");
        break;
    case "CustomerServiceRepresentative":
    CustomerServiceRepresentativeProfile csrProfile = commuterSystem.getCsrDirectory().findCSRByPersonID(loggedInPersonID);
    if (csrProfile == null) {
        JOptionPane.showMessageDialog(this, "CSR profile not found.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    CSRJPanel csrPanel = new CSRJPanel(UserProcessContainer, commuterSystem, csrProfile);
    UserProcessContainer.add("CSRJPanel", csrPanel);
    layout.show(UserProcessContainer, "CSRJPanel");
    break;
    case "IssueManager":
        IssueManagerProfile issueManagerProfile = commuterSystem.getIssueManagerDirectory().findIssueManagerByPersonID(loggedInPersonID);
        if (issueManagerProfile == null) {
            JOptionPane.showMessageDialog(this, "Issue Manager profile not found.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        IssueManagerJPanel issueManagerPanel = new IssueManagerJPanel(UserProcessContainer, commuterSystem, issueManagerProfile);
        UserProcessContainer.add("IssueManagerJPanel", issueManagerPanel);
        layout.show(UserProcessContainer, "IssueManagerJPanel");
        break;
    default:
        JOptionPane.showMessageDialog(this, "Unknown role: " + role, "Error", JOptionPane.ERROR_MESSAGE);
}

        layout.show(UserProcessContainer, role);
        UserProcessContainer.revalidate(); // Revalidate to reflect changes
        UserProcessContainer.repaint();
    } else {
        JOptionPane.showMessageDialog(this, "Invalid username or password.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
private boolean isValidPassword(String password) {
        if (password == null || password.length() < 8) {
            return false;
        }

        boolean hasUppercase = false;
        boolean hasLowercase = false;
        boolean hasSpecialCharacter = false;

        for (char c : password.toCharArray()) {
            if (Character.isUpperCase(c)) {
                hasUppercase = true;
            } else if (Character.isLowerCase(c)) {
                hasLowercase = true;
            } else if (!Character.isLetterOrDigit(c)) {
                hasSpecialCharacter = true;
            }

            // If all conditions are met, no need to continue checking
            if (hasUppercase && hasLowercase && hasSpecialCharacter) {
                return true;
            }
        }

        return hasUppercase && hasLowercase && hasSpecialCharacter;
    }



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
         CommuterSystem commuterSystem = ConfigureCommuterSystem.configure();

        java.awt.EventQueue.invokeLater(() -> {
            new MainJFrame1(commuterSystem).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ControlPanel;
    private javax.swing.JSplitPane SplitPane;
    private javax.swing.JPanel UserProcessContainer;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnViewPassword;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUserID;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUserID;
    // End of variables declaration//GEN-END:variables
}
